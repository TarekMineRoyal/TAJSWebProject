// <auto-generated />
using System;
using Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TourAgencyDbContext))]
    [Migration("20250616142936_Update3")]
    partial class Update3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AppEntities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BookingType")
                        .HasColumnType("bit")
                        .HasColumnName("bookingType");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("employeeId");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("endDateTime");

                    b.Property<int>("NumberOfPassengers")
                        .HasColumnType("int")
                        .HasColumnName("numOfPassengers");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("startDateTime");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("color");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<decimal>("Mbw")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("mbw");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("model");

                    b.Property<decimal>("Ppd")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("ppd");

                    b.Property<decimal>("Pph")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("pph");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasColumnName("seats");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.CarBooking", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("carId");

                    b.Property<string>("DropoffLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("dropoffLocation");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("pickupLocation");

                    b.Property<bool>("WithDriver")
                        .HasColumnType("bit")
                        .HasColumnName("withDriver");

                    b.HasKey("BookingId");

                    b.HasIndex("CarId");

                    b.ToTable("CarBookings");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.ImageShot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarBookingId")
                        .HasColumnType("int")
                        .HasColumnName("carBookingId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("path");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("CarBookingId");

                    b.ToTable("ImageShots");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("amountDue");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("amountPaid");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingId");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("paymentDate");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("satatus");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("icon");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("method");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.PaymentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("amount");

                    b.Property<string>("PayPalCaptureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalRefundId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentMethodId");

                    b.Property<string>("StripePaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeRefundId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("transactionDate");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("body");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("employeeId");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("image");

                    b.Property<int?>("PostTypeId")
                        .HasColumnType("int")
                        .HasColumnName("postTypeId");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("publishDate");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<int>("Views")
                        .HasColumnType("int")
                        .HasColumnName("views");

                    b.HasKey("Id");

                    b.HasIndex("PostTypeId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.PostTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("postId");

                    b.Property<int?>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tagId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.PostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("PostTypes");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.SeoMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("metaDescription");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("metaKeywords");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("metaTitle");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("postId");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("urlSlug");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("SeoMetadata");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("isAvailable");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit")
                        .HasColumnName("isPrivate");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("slug");

                    b.HasKey("Id");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.TripBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("BookingId");

                    b.Property<int?>("TripPlanId")
                        .HasColumnType("int")
                        .HasColumnName("tripPlanId");

                    b.Property<bool>("WithGuide")
                        .HasColumnType("bit")
                        .HasColumnName("withGuide");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("TripPlanId");

                    b.ToTable("TripBookings");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.TripPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("endDateTime");

                    b.Property<string>("HotelsStays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("hotelsStays");

                    b.Property<string>("IncludedServices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("includedServices");

                    b.Property<string>("MealsPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mealsPlan");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("regionId");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("startDateTime");

                    b.Property<string>("Stops")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("stops");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("tripId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("TripId");

                    b.ToTable("TripPlans");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.TripPlanCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("carId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("price");

                    b.Property<int?>("TripPlanId")
                        .HasColumnType("int")
                        .HasColumnName("tripPlanId");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("TripPlanId");

                    b.ToTable("TripPlanCars");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Car", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.CarBooking", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.Booking", "Booking")
                        .WithOne("CarBooking")
                        .HasForeignKey("Domain.Entities.AppEntities.CarBooking", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppEntities.Car", "Car")
                        .WithMany("CarBookings")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.ImageShot", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.CarBooking", "CarBooking")
                        .WithMany("ImageShots")
                        .HasForeignKey("CarBookingId");

                    b.Navigation("CarBooking");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.PaymentTransaction", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.Payment", "Payment")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppEntities.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Post", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.PostType", "PostType")
                        .WithMany("Posts")
                        .HasForeignKey("PostTypeId");

                    b.Navigation("PostType");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.PostTag", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId");

                    b.HasOne("Domain.Entities.AppEntities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId");

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.SeoMetadata", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.Post", "Post")
                        .WithMany("SeoMetadata")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.TripBooking", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.Booking", "Booking")
                        .WithOne("TripBooking")
                        .HasForeignKey("Domain.Entities.AppEntities.TripBooking", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppEntities.TripPlan", "TripPlan")
                        .WithMany("TripBookings")
                        .HasForeignKey("TripPlanId");

                    b.Navigation("Booking");

                    b.Navigation("TripPlan");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.TripPlan", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.Region", "Region")
                        .WithMany("TripPlans")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppEntities.Trip", "Trip")
                        .WithMany("TripPlans")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.TripPlanCar", b =>
                {
                    b.HasOne("Domain.Entities.AppEntities.Car", "Car")
                        .WithMany("TripPlanCars")
                        .HasForeignKey("CarId");

                    b.HasOne("Domain.Entities.AppEntities.TripPlan", "TripPlan")
                        .WithMany("TripPlanCars")
                        .HasForeignKey("TripPlanId");

                    b.Navigation("Car");

                    b.Navigation("TripPlan");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Booking", b =>
                {
                    b.Navigation("CarBooking");

                    b.Navigation("Payments");

                    b.Navigation("TripBooking");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Car", b =>
                {
                    b.Navigation("CarBookings");

                    b.Navigation("TripPlanCars");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.CarBooking", b =>
                {
                    b.Navigation("ImageShots");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Payment", b =>
                {
                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.PaymentMethod", b =>
                {
                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Post", b =>
                {
                    b.Navigation("PostTags");

                    b.Navigation("SeoMetadata");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.PostType", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Region", b =>
                {
                    b.Navigation("TripPlans");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.Trip", b =>
                {
                    b.Navigation("TripPlans");
                });

            modelBuilder.Entity("Domain.Entities.AppEntities.TripPlan", b =>
                {
                    b.Navigation("TripBookings");

                    b.Navigation("TripPlanCars");
                });
#pragma warning restore 612, 618
        }
    }
}
